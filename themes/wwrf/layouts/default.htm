description = "Default layout for restricted access pages."

[session]
security = "user"
redirect = "home"

[googleTracker]

[RainLab\User\Components\Account account]
redirect = "home"
paramCode = "code"
forceSecure = 0

[UserAgreement]

[Questionnaire]
==
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>Transition Center Online - {{ this.page.title }}</title>
        <meta name="description" content="{{ this.page.meta_description }}">
        <meta name="title" content="{{ this.page.meta_title }}">
        <meta name="author" content="WWRF">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <link rel="icon" type="image/png" href="{{ 'assets/images/october.png'|theme }}" />
        {% styles %}
        <link href="{{ [
            'assets/less/theme.less'
        ]|theme }}" rel="stylesheet">
    </head>
    <body>
    
        <header id="layout-header">
            {% partial "header" %}
        </header>

        <!-- Content -->
        <section id="layout-content">
             {% page %}
             {% component 'googleTracker' %}
        </section>

        <!-- Footer -->
        <footer id="layout-footer">
            {% partial "footer" %}
        </footer>
        
        {% if user.groups[0].name ==  'Users' %}
        
			<!-- User Agreement Modal -->
			<div class="modal fade" id="userAgreement" role="dialog">
			  <div class="modal-dialog modal-lg">
			  
			    <!-- Modal content-->
			    <div class="modal-content">
			      <div class="modal-body">
			        {% content 'user_agreement' %}
			        {{ user.name }} {{ user.surname }} <span class="pull-right">{{ today|date('M d, Y') }}</span>
			      </div>
			      <div class="modal-footer">
			        <button type="button" 
			        		class="btn btn-primary btn-block" 
			        		data-request="onUserAgreement" 
			        		id="acceptAgreement"
			        		>Accept</button>
			      </div>
			    </div>
			    
			  </div>
			</div>
			
			<!-- Questionnaire Modal -->
			<div class="modal fade" id="questionnaire" role="dialog">
			    <div class="modal-dialog">
			        <!--Content-->
			        <div class="modal-content">
			            <!--Header-->
			            <div class="modal-header">
			                <h4 class="modal-title">Program Participant Survey</h4>
			            </div>
			            <!--Body-->
			            <div class="modal-body">
	
						  <form role="form"
						    data-request="{{Questionnaire}}::onSave"
						    data-request-flash>
						  	
						    {{ form.formRender()|raw }}
	
						  <button class="btn btn-success btn-block btn-lg" 
						  		  type="submit" 
						  		  value="Submit"
						  		  data-toggle="modal"
						  		  data-target="#questionnaire">Submit</button>
	
						  </form>
	
					      </form>
	      				</div>
			        </div>
			        <!--/.Content-->
			    </div>
			</div>
			<!-- /Questionnaire Modal -->
            
        {% endif %}
        
        <!-- Scripts -->
        <script src="{{ [
            'assets/javascript/jquery.js',
            'assets/vendor/bootstrap/js/transition.js',
            'assets/vendor/bootstrap/js/alert.js',
            'assets/vendor/bootstrap/js/button.js',
            'assets/vendor/bootstrap/js/carousel.js',
            'assets/vendor/bootstrap/js/collapse.js',
            'assets/vendor/bootstrap/js/dropdown.js',
            'assets/vendor/bootstrap/js/modal.js',
            'assets/vendor/bootstrap/js/tooltip.js',
            'assets/vendor/bootstrap/js/popover.js',
            'assets/vendor/bootstrap/js/scrollspy.js',
            'assets/vendor/bootstrap/js/tab.js',
            'assets/vendor/bootstrap/js/affix.js',
            'assets/javascript/app.js'
        ]|theme }}"></script>
        
        <script>

            $(document).ready(function(){

            	{% if user.user_agreement == null %}
                $(window).load(function(){
                	
                    $('#userAgreement').modal({
                    	show:true,
                    	backdrop:'static',
                    	keyboard:false
                    });
                    $("#acceptAgreement").click(function(){
				        $("#userAgreement").modal('hide');
				        $("#questionnaire").modal({
				        	show: true,
				        	backdrop:'static',
				        	keyboard:false
				        });
			    	});
				    $("#myBtn2").click(function(){
				        $("#myModal2").modal({show: false});
				    })
                });
                {% endif %}

            });
            
        </script>
        
    	<script>
			// This example requires the Places library. Include the libraries=places
			// parameter when you first load the API. For example:
			// <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
		
			var map;
		
			var infowindow;

            var wwrf = {
					lat: 37.682319,
					lng: -97.333311
				};

			function initMap() {

				map = new google.maps.Map(document.getElementById('map'), {
                    center: wwrf,
                    zoom: 14,
                    mapTypeControl: false,
				    panControl: false,
				    zoomControl: false,
				    streetViewControl: false
                });

				var squareCoords = [
					{lat: 37.697465, lng: -97.341629},
					{lat: 37.697636, lng: -97.317306},
					{lat: 37.671759, lng: -97.317142},
					{lat: 37.673308, lng: -97.352833},
					{lat: 37.693239, lng: -97.352852}
				];

				// Construct the walkroute polygon.
				var walkRoute = new google.maps.Polygon({
					paths: squareCoords,
					strokeColor: '#008000',
					strokeOpacity: 0.8,
					strokeWeight: 2,
					fillColor: '#008000',
					fillOpacity: 0.1
				});
				walkRoute.setMap(map);
		  
		  		infowindow = new google.maps.InfoWindow();
		  		/*var service = new google.maps.places.PlacesService(map);
				service.nearbySearch({
					location: wwrf,
					radius: 1600,
					type: ['establishment'],
					keyword: ['restaurant']
				}, callback);*/
		  	
			}
			
            var markers = [];
            var MARKER_PATH = 'https://developers.google.com/maps/documentation/javascript/images/marker_green';

			function callback(results, status) {
			  if (status === google.maps.places.PlacesServiceStatus.OK) {
			    for (var i = 0; i < results.length; i++) {
			        createMarker(results[i], i);
			        addResult(results[i], i);
			    }
			    directionsDisplay.setMap(null); // clear direction from the map
				directionsDisplay.setPanel(null); // clear directionpanel from the map          
				//directionsDisplay = new google.maps.DirectionsRenderer(); // this is to render again, otherwise your route wont show for the second time searching
				//directionsDisplay.setMap(map); //this is to set up again
				map.setZoom(14);
			  }
			}

			var directionsDisplay;
			
			function createMarker(place, i) {
                var placeLoc = place.geometry.location;
                
                var markerLetter = String.fromCharCode('A'.charCodeAt(0) + (i % 26));
			  	var markerIcon = MARKER_PATH + markerLetter + '.png';
			  	
                var marker = new google.maps.Marker({
                    map: map,
                    position: place.geometry.location,
                    icon: markerIcon,
                    animation: google.maps.Animation.DROP
                });

                // Create a marker for each place.
                markers.push(marker);
			
                google.maps.event.addListener(marker, 'click', function() {
                	
                	var directionsService = new google.maps.DirectionsService;
                    directionsDisplay = new google.maps.DirectionsRenderer;
                	
                	// Show info window on map
                	infowindow.setContent('<strong>' + place.name + '</strong><br/>' + place.vicinity);
            		infowindow.open(map, this);
            		
                    var service = new google.maps.DistanceMatrixService;
                    
			        service.getDistanceMatrix({
			            origins: [{lat:37.681975, lng: -97.333269}],
			            destinations: [place.vicinity],
			            travelMode: 'WALKING',
			            unitSystem: google.maps.UnitSystem.IMPERIAL,
			            avoidHighways: false,
			            avoidTolls: false
			        }, function(response, status) {
				        if (status !== 'OK') {
				            alert('Error was: ' + status);
				        } else {
				            var originList = response.originAddresses;
				            var destinationList = response.destinationAddresses;
				            
				            // Clear out the old markers.
			                markers.forEach(function(marker) {
			                    marker.setMap(null);
			                });
			                markers = [];
			                
			                clearResults();

				            var showGeocodedAddressOnMap = function(asDestination) {
				                var icon = asDestination ? destinationIcon : originIcon;
				                return function(results, status) {
				                    if (status === 'OK') {
				                    map.fitBounds(bounds.extend(results[0].geometry.location));
				                    markers.push(new google.maps.Marker({
				                        map: map,
				                        position: results[0].geometry.location,
				                        icon: icon
				                    }));
				                    } else {
				                    alert('Geocode was not successful due to: ' + status);
				                    }
				                };
				            };
				
				            for (var i = 0; i < originList.length; i++) {
				                var results = response.rows[i].elements;
				
				                for (var j = 0; j < results.length; j++) {
				                    
				                    var distance = results[j].distance.value

				                    directionsDisplay.setMap(map);
				                    directionsDisplay.setPanel(document.getElementById('map-directions'));
				
				                    directionsService.route({
				                        origin: {lat:37.681975, lng: -97.333269},
				                        destination: place.vicinity,
				                        travelMode: 'WALKING',
				                    }, function(response, status) {
				                        if (status === 'OK') {
				                        directionsDisplay.setDirections(response);
				                        } else {
				                        window.alert('Directions request failed due to ' + status);
				                        }
				                    });
				                    
				                    showPlace(place);
				                }
				            }
				        }
                	});
        	
                });
			}
			
			function calculateAndDisplayRoute(directionsService, directionsDisplay) {
		        var start = wwrf;
		        var end = place.vicinity;
		        directionsService.route({
		          origin: start,
		          destination: end,
		          travelMode: 'WALKING'
		        }, function(response, status) {
		          if (status === 'OK') {
		            directionsDisplay.setDirections(response);
		          } else {
		            window.alert('Directions request failed due to ' + status);
		          }
		        });
	      	}

            function updateMap(selectControl)   {
                // Clear out the old markers.
                markers.forEach(function(marker) {
                    marker.setMap(null);
                });
                markers = [];
                
                clearResults();

                var keyword = selectControl;
                var service = new google.maps.places.PlacesService(map);
                service.nearbySearch({
                    location: wwrf,
                    radius: 1600,
                    type: ['establishment'],
                    keyword: keyword
                }, callback);
            }
            
            function addResult(result, i) {
			  var results = document.getElementById('results');
			  var markerLetter = String.fromCharCode('A'.charCodeAt(0) + (i % 26));
			  var markerIcon = MARKER_PATH + markerLetter + '.png';
			
			  var tr = document.createElement('tr');
			  tr.style.backgroundColor = (i % 2 === 0 ? '#F0F0F0' : '#FFFFFF');
			  tr.onclick = function() {
			    google.maps.event.trigger(markers[i], 'click');
			  };
			
			  var iconTd = document.createElement('td');
			  var nameTd = document.createElement('td');
			  var icon = document.createElement('img');
			  icon.src = markerIcon;
			  icon.setAttribute('class', 'placeIcon');
			  icon.setAttribute('className', 'placeIcon');
			  var name = document.createTextNode(result.name);
			  iconTd.appendChild(icon);
			  nameTd.appendChild(name);
			  tr.appendChild(iconTd);
			  tr.appendChild(nameTd);
			  results.appendChild(tr);
			}
			
			function showPlace(place) {
				
				
				var results = document.getElementById('results');
				//var markerLetter = String.fromCharCode('A'.charCodeAt(0) + (i % 26));
				//var markerIcon = MARKER_PATH + markerLetter + '.png';
				
				var tr = document.createElement('tr');
				//tr.style.backgroundColor = (i % 2 === 0 ? '#F0F0F0' : '#FFFFFF');
				//tr.onclick = function() {
				//google.maps.event.trigger(markers[i], 'click');
				//};
				
				//var iconTd = document.createElement('td');
				var nameTd = document.createElement('tr');
				var addressTd = document.createElement('tr');
				
				//var icon = document.createElement('img');
				//icon.src = markerIcon;
				//icon.setAttribute('class', 'placeIcon');
				//icon.setAttribute('className', 'placeIcon');
				var name = document.createTextNode(place.name);
				var address = document.createTextNode(place.vicinity);
				
				//iconTd.appendChild(icon);
				nameTd.appendChild(name);
				addressTd.appendChild(address);
				
				//tr.appendChild(iconTd);
				tr.appendChild(nameTd);
				tr.appendChild(addressTd);
				
				
				var placeInfo = new google.maps.places.PlacesService(map);
                placeInfo.getDetails({
                    placeId: place.place_id,
                }, callbackInfo);
                
                function callbackInfo(place, status) {
				  if (status == google.maps.places.PlacesServiceStatus.OK) {
				  	
				    var phoneTr = document.createElement('tr');
				    var phone = document.createTextNode(place.formatted_phone_number);
				    
				    phoneTr.appendChild(phone);
				    tr.appendChild(phoneTr);
				    
				    
				    var linkTr = document.createElement('tr');
				    var linkElement = document.createElement('A');
				    
				    linkElement.href = place.website;
				    linkElement.target = "_blank";
				    linkElement.text = place.website;
				    linkTr.appendChild(linkElement);
				    
				    tr.appendChild(linkTr);
				    
				    return tr;
				  }
				}
				
				results.appendChild(tr);
			}
			
			function clearResults() {
			  var results = document.getElementById('results');
			  while (results.childNodes[0]) {
			    results.removeChild(results.childNodes[0]);
			  }
			}
			
			function clearInfo() {
			  var info = document.getElementById('infoTableBody');
			  while (info.childNodes[0]) {
			    info.removeChild(info.childNodes[0]);
			  }
			}
			
            function clearMarkers() {
                for (var i = 0; i < markersArray.length; i++ ) {
                    markersArray[i].setMap(null);
                }
                markersArray.length = 0;
            }

	</script>
	
		<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDCEEQWmjat4dZoYXpY9zBg4w3zLD91Sfo&libraries=places&callback=initMap" async defer></script>
        
        {% framework extras %}
        {% scripts %}

    </body>
</html>